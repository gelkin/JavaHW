import java.util.HashMap;

public class Parser {
    private HashMap<String, Integer> vars;

    public Parser() {
        vars = new HashMap<String, Integer>();
    }
    
    public Parser(HashMap<String, Integer> vars) {
        this.vars = vars;
    }

    public void putVar(String varName, int varValue) {
        vars.put(varName, varValue);
    }

    public int getVar(String varName) {
        return vars.get(varName);
    }

    public Evaluable Parse(String s) {
        Result result = PlusMinus(s);
        return result.exp;
    }

    private Result PlusMinus(String s) {
        Result current = MulDiv(s);
        Evaluable exp = current.exp;

        while (current.rest.length() > 0) {
 	     	char sign = current.rest.charAt(0);
            if (sign != '+' && sign != '-') {
            	break;
            }

            String next = current.rest.substring(1);
            current = MulDiv(next);
            
            if (sign == '+') {
                exp = new Plus(exp, current.exp);
            } else {
                exp = new Minus(exp, current.exp);;
            }
        }
        return new Result(exp, current.rest);
    }
	
	private Result MulDiv(String s) {
        Result current = Brackets(s);

        Evaluable exp = current.exp;
        while (true) {
            if (current.rest.length() == 0) {
                return current;
            }
            char sign = current.rest.charAt(0);
            if (sign != '*' && sign != '/') {
            	return current;
            }

            String next = current.rest.substring(1);
            Result right = Brackets(next);

            if (sign == '*') {
                exp = new Times(exp, right.exp);
            } else {
                exp = new Division(exp, right.exp);
            }

            current = new Result(exp, right.rest);
        }
    }
	
    private Result Brackets(String s) {
        char ch = s.charAt(0);
        if (ch == '(') {
            Result r = PlusMinus(s.substring(1));
            if (!r.rest.isEmpty() && r.rest.charAt(0) == ')') {
                r.rest = r.rest.substring(1);
            } else {
                System.err.println("Ошибка: не закрытая скобка");
            }
            return r;
        }
        return Variable(s);
    }

    private Result Variable(String s) {
        String f = "";
        int i = 0;
        
        while (i < s.length() && Character.isLetter(s.charAt(i))) {
            f += s.charAt(i);
            i++;
        }
        if (!f.isEmpty()) { 
        	return new Result((new Variable(f)), s.substring(f.length()));
        }
        return Num(s);
    }

   private Result Num(String s) {
        int i = 0;
        int dot_cnt = 0;
        boolean negative = false;
     
        if( s.charAt(0) == '-' ){
            negative = true;
            s = s.substring(1);
        }
        
        while (i < s.length() && Character.isDigit(s.charAt(i))) {
            i++;
        }
        int dPart = Integer.parseInt(s.substring(0, i));
        if( negative ) {
        	dPart = (-1)*dPart;
        }
        String restPart = s.substring(i);

        return new Result((new Const(dPart)), restPart);
    }
} 
